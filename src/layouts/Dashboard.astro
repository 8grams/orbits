---
import Layout from "./Layout.astro";
import { Picture } from "astro:assets";
const { pageTitle } = Astro.props;
import { canPerformAction } from "../utils/roles";
import { Icons } from "../utils/icons";

const { user } = Astro.locals;

const permissions = canPerformAction(user?.role);
---

<Layout pageTitle={pageTitle}>
  <nav
    class="w-full bg-white shadow-md"
    x-data="{ open: false, current: window.location.pathname }"
  >
    <div class="flex justify-between items-center px-6 py-6">
      <div class="text-xl font-bold text-sky-500">
        <a href="/dashboard">Dashboard</a>
      </div>
      <button @click="open = !open" class="md:hidden" x-cloak>
        <svg
          x-show="!open"
          class="w-6 h-6 text-gray-700"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
        <svg
          x-show="open"
          class="w-6 h-6 text-gray-700"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
      <div class="relative hidden md:block" x-data="{ userOpen: false }">
        <button
          class="btn btn-ghost flex items-center gap-2"
          @click="userOpen = !userOpen"
        >
          {
            user?.avatar && (
              <Picture
                src={user?.avatar as string}
                alt={user?.name as string}
                width="30"
                height="30"
                class="rounded-full"
                quality={100}
              />
            )
          }
          <span>{user?.name}</span>
          <svg
            class="ml-2 w-4 h-4 transition-transform"
            :class="userOpen ? 'rotate-180' : ''"
            xmlns="http://www.w3.org/2000/svg"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M19 9l-7 7-7-7"></path>
          </svg>
        </button>
        <ul
          class="menu menu-md dropdown-content mt-3 p-2 shadow bg-base-100 rounded-box w-52 absolute right-0 z-50"
          x-show="userOpen"
          x-transition
          @click.outside="userOpen = false"
          x-cloak
        >
          <form method="POST" action="/logout">
            <li><button type="submit">Logout</button></li>
          </form>
        </ul>
      </div>
    </div>
    <ul
      class="flex flex-col md:flex-row md:items-center gap-4 md:gap-6 px-6 pb-6 md:pb-6"
      :class="open ? 'block' : 'hidden md:flex'"
      x-cloak
    >
      <li>
        <a
          :class="current === '/dashboard/inventories' ? 'underline underline-offset-12 font-bold text-sky-500' : 'text-gray-500'"
          class="flex items-center gap-2"
          href="/dashboard/inventories"
        >
          <Icons.inventory
            :class="current === '/dashboard/inventories' ? 'text-sky-500' : 'text-gray-500'"
            class="w-5 h-5"
          />
          Inventories
        </a>
      </li>
      <li>
        <a
          :class="current === '/dashboard/playbooks' ? 'underline underline-offset-12 font-bold text-sky-500' : 'text-gray-500'"
          class="flex items-center gap-2"
          href="/dashboard/playbooks"
        >
          <Icons.playbook
            :class="current === '/dashboard/playbooks' ? 'text-sky-500' : 'text-gray-500'"
            class="w-4 h-4"
          />
          Playbooks
        </a>
      </li>
      <li>
        <a
          :class="current.includes('/dashboard/projects') ? 'underline underline-offset-12 font-bold text-sky-500' : 'text-gray-500'"
          class="flex items-center gap-2"
          href="/dashboard/projects"
        >
          <Icons.projects
            :class="current.includes('/dashboard/projects') ? 'text-sky-500' : 'text-gray-500'"
            class="w-4 h-4"
          />
          Projects
        </a>
      </li>
      <li>
        <a
          :class="current === '/dashboard/jobs' ? 'underline underline-offset-12 font-bold text-sky-500' : 'text-gray-500'"
          class="flex items-center gap-2"
          href="/dashboard/jobs"
        >
          <Icons.rocket
            :class="current === '/dashboard/jobs' ? 'text-sky-500' : 'text-gray-500'"
            class="w-5 h-5"
          />
          Jobs
        </a>
      </li>
      <li>
        <a
          :class="current === '/dashboard/users' ? 'underline underline-offset-12 font-bold text-sky-500' : 'text-gray-500'"
          class="flex items-center gap-2"
          href="/dashboard/users"
        >
          <Icons.users
            :class="current === '/dashboard/users' ? 'text-sky-500' : 'text-gray-500'"
            class="w-5 h-5"
          />
          Users
        </a>
      </li>
      <li class="block md:hidden">
        <form method="POST" action="/logout">
          <button type="submit" class="btn btn-error btn-soft">Logout</button>
        </form>
      </li>
    </ul>
  </nav>

  <main class="py-6 px-6 max-w-[1440px] mx-auto">
    <slot name="content" />
  </main>
</Layout>
<slot name="dialog" />
<script is:inline define:vars={{ permissions }}>
  document.addEventListener("alpine:init", () => {
    Alpine.store("role", {
      permissions: permissions,
    });
  });
  window.formUtils = {
    clearErrors(form) {
      form.querySelectorAll(".form-error").forEach((el) => el.remove());
      document.querySelectorAll('[id^="errors_"]').forEach((container) => {
        container.textContent = "";
      });
    },
    showError(form, inputName, msg) {
      const inputs = form.querySelectorAll(`[name="${inputName}"]`);
      if (!inputs.length) return;
      inputs.forEach((input) => {
        const next = input.nextElementSibling;
        if (next?.classList.contains("form-error")) {
          next.remove();
        }
      });
      if (inputName.includes("[]")) {
        const containerId = "errors_" + inputName.replace(/\[\]/g, "");
        const container = document.getElementById(containerId);
        if (container) {
          container.textContent = msg;
        } else {
          const errorEl = document.createElement("p");
          errorEl.className = "form-error text-sm text-red-600";
          errorEl.textContent = msg;
          inputs[0].insertAdjacentElement("afterend", errorEl);
        }
      } else {
        inputs.forEach((input) => {
          const errorEl = document.createElement("p");
          errorEl.className = "form-error text-sm text-red-600";
          errorEl.textContent = msg;
          input.insertAdjacentElement("afterend", errorEl);
        });
      }
    },
  };
</script>
