---
import Dashboard from "../../../../layouts/Dashboard.astro"
import { openDB } from "../../../../utils/db"
import { Icons } from "../../../../utils/icons"

const db = await openDB()

const { slug } = Astro.params

const getProject = await db.all(`
  SELECT 
  p.id AS project_id,
  p.name AS project_name,
  i.name AS inventory_name,
  i.id AS inventory_id,
  pb.name AS playbook_name,
  pb.id AS playbook_id,
  pm.id AS metadata_id,
  pm.type AS metadata_type,
  pm.key AS metadata_key,
  pm.value AS metadata_value,
  pm.ip_address AS metadata_ip,
  pm.description AS metadata_description,
  j.choose_time AS job_choose_time,
  j.valid_until AS job_valid_until
FROM projects p
LEFT JOIN inventories i ON p.inventories_id = i.id
LEFT JOIN playbooks pb ON p.playbook_id = pb.id
LEFT JOIN project_metadata pm ON p.id = pm.project_id
LEFT JOIN jobs j ON p.id = j.project_id
  WHERE p.name = ?
`, [slug])

let project: any = null;

for (const row of getProject) {
  const {
    project_id,
    project_name,
    inventory_name,
    inventory_id,
    playbook_name,
    playbook_id,
    metadata_id,
    metadata_type,
    metadata_key,
    metadata_value,
    metadata_ip,
    metadata_description,
    job_choose_time,
    job_valid_until
  } = row;

  if (!project) {
    project = {
      project_id,
      project_name,
      inventory_name,
      inventory_id,
      playbook_name,
      playbook_id,
      job_choose_time,
      job_valid_until,
      children: []
    };
  }

  if (metadata_id !== null) {
    project.children.push({
      id: metadata_id,
      type: metadata_type,
      key: metadata_key,
      value: metadata_value,
      ip_address: metadata_ip,
      description: metadata_description
    });
  }
}
---
<Dashboard pageTitle={`Project - ${slug}`}>
  <section slot="content" class="card bg-white w-full rounded-none py-12 px-12 shadow-sm flex flex-col gap-8">
    <div class="grid grid-cols-1 md:grid-cols-2 gap-4 w-full">
      <div class="flex flex-col gap-6">
        <div class="flex flex-col gap-4">
          <h2 class="text-black font-bold text-xl">Name</h2>
          <p>{project.project_name}</p>
        </div>
        <div class="flex flex-col gap-4">
          <h2 class="text-black font-bold text-xl">Playbook</h2>
          <div class="flex flex-row gap-4">
            <p>{project.playbook_name}</p>
            <a class="cursor-pointer" href={`/dashboard/playbooks?search=${project.playbook_name}`} target="_blank" rel="noopener noreferrer">
              <Icons.newTab/>
            </a>
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <h2 class="text-black font-bold text-xl">Inventories</h2>
          <div class="flex flex-row gap-4 space-x-8">
            <div class="flex flex-col gap-4">
              <h2 class="text-black">IP Address</h2>
              {project.children.filter((item: any) => item.type === 'host').map((v: any) => (
                <p>{v.ip_address}</p>
              ))}
            </div>
            <div class="flex flex-col gap-4">
              <h2 class="text-black">Description</h2>
              {project.children.filter((item: any) => item.type === 'host').map((v: any) => (
                <p>{v.description}</p>
              ))}
            </div>
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <h2 class="text-black font-bold text-xl">Variables</h2>
          <div class="flex flex-row gap-4 space-x-8">
            <div class="flex flex-col gap-4">
              <h2 class="text-black">Key</h2>
              {project.children.filter((item: any) => item.type === 'variable').map((v: any) => (
                <p>{v.key}</p>
              ))}
            </div>
            <div class="flex flex-col gap-4">
              <h2 class="text-black">Value</h2>
              {project.children.filter((item: any) => item.type === 'variable').map((v: any) => (
                <p>{v.value}</p>
              ))}
            </div>
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <h2 class="text-black font-bold text-xl">Secrets</h2>
          <div class="flex flex-row gap-4 space-x-8">
            <div class="flex flex-col gap-4">
              <h2 class="text-black">Key</h2>
              {project.children.filter((item: any) => item.type === 'secret').map((v: any) => (
                <p>{v.key}</p>
              ))}
            </div>
            <div class="flex flex-col gap-4">
              <h2 class="text-black">Value</h2>
              {project.children.filter((item: any) => item.type === 'secret').map((v: any) => (
                <p>{v.value}</p>
              ))}
            </div>
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <h2 class="text-black font-bold text-xl">Parameters</h2>
          <div class="flex flex-row gap-4 space-x-8">
            <div class="flex flex-col gap-4">
              <h2 class="text-black">Key</h2>
              {project.children.filter((item: any) => item.type === 'parameter').map((v: any) => (
                <p>{v.key}</p>
              ))}
            </div>
            <div class="flex flex-col gap-4">
              <h2 class="text-black">Value</h2>
              {project.children.filter((item: any) => item.type === 'parameter').map((v: any) => (
                <p>{v.value}</p>
              ))}
            </div>
          </div>
        </div>
        <div class="flex flex-col gap-4">
          <h2 class="text-black font-bold text-xl">Scheduled</h2>
          <p>Next Execution : {project.job_choose_time ?? '-'}</p>
          <p>Executed at : {project.job_valid_until ?? '-'}</p>
        </div>
      </div>

      <div x-data="ansibleApp" class="flex flex-col gap-4 w-full">
        <div class="flex gap-4 justify-end">
          <button @click="runPlaybook" class="btn btn-primary w-32">Run</button>
          <button @click="checkPlaybook" class="btn btn-info w-32">Check</button>
          <button @click="toggleEdit" class="btn btn-accent w-32" x-text="editMode ? 'Stop Edit' : 'Edit'"></button>
        </div>
        <div id="xterm" class="w-full h-screen bg-black text-white rounded" style="font-family: monospace;"></div>
      </div>
    </div>
  </section>
</Dashboard>
<script is:inline>
  // Load xterm.js script + css from CDN
  const script = document.createElement("script");
  script.src = "https://cdn.jsdelivr.net/npm/xterm@5.3.0/lib/xterm.min.js";
  script.onload = () => {
    const link = document.createElement("link");
    link.rel = "stylesheet";
    link.href = "https://cdn.jsdelivr.net/npm/xterm/css/xterm.css";
    document.head.appendChild(link);
    const styleTag = document.createElement("style");
    styleTag.textContent = `
      .xterm {
        width: 100% !important;
        max-width: 100% !important;
        box-sizing: border-box;
      }
      .xterm-viewport {
        overflow-y: auto !important;
      }
    `;
    document.head.appendChild(styleTag);

    document.addEventListener('alpine:init', () => {
      Alpine.data('ansibleApp', () => ({
        term: null,
        editMode: false,
        buffer: [],
        prompt: '> ',
        inputBuffer: '',
        init() {
          this.term = new Terminal({
            cursorBlink: true,
            fontFamily: 'monospace',
            fontSize: 14,
            lineHeight: 1.2,
            theme: {
              background: '#000000',
              foreground: '#ffffff'
            },
            convertEol: true,
            scrollback: 1000,
            wordWrap: true
          });

          const container = document.getElementById('xterm');
          this.term.open(container);

          const style = getComputedStyle(container);
          const width = parseInt(style.width);
          const height = parseInt(style.height);
          const charWidth = 9;
          const charHeight = 18;

          const cols = Math.floor(width / charWidth);
          const rows = Math.floor(height / charHeight);
          this.term.resize(cols, rows);

          this.term.writeln('Welcome to Ansible Terminal!');
          this.term.writeln('Click Edit to start editing your playbook.');
          this.promptInput();

          // Event handler input
          this.term.onKey(e => {
            if (!this.editMode) return;
            const ev = e.domEvent;
            const printable = !ev.altKey && !ev.ctrlKey && !ev.metaKey;
            if (ev.key === 'Enter') {
              this.buffer.push(this.inputBuffer);
              this.inputBuffer = '';
              this.promptInput();
            } else if (ev.key === 'Backspace') {
              if (this.inputBuffer.length > 0) {
                this.inputBuffer = this.inputBuffer.slice(0, -1);
                this.term.write('\b \b');
              }
            } else if (printable) {
              this.inputBuffer += e.key;
              this.term.write(e.key);
            }
          });
        },
        promptInput() {
          this.term.write('\r\n' + this.prompt);
          this.inputBuffer = '';
          this.term.focus();
        },
        runPlaybook() {
          this.term.writeln('\r\n$ ansible-playbook playbook.yml');
          setTimeout(() => {
            this.term.writeln('[SUCCESS] All tasks completed.');
          }, 1000);
        },
        checkPlaybook() {
          this.term.writeln('\r\n$ ansible-playbook playbook.yml --check');
          setTimeout(() => {
            this.term.writeln('[CHECK MODE] Tasks would have run successfully.');
          }, 1000);
        },
        toggleEdit() {
          this.editMode = !this.editMode;
          if (this.editMode) {
            this.term.writeln('\r\n-- Edit Mode Enabled --');
            this.term.writeln('Type your playbook YAML lines. Press Enter after each line.');
            if (this.buffer.length > 0) {
              this.term.writeln('\r\n[Previous Edit]');
              this.buffer.forEach(line => {
                this.term.writeln(this.prompt + line); // > line
              });
            }
            this.inputBuffer = '';
            this.term.write(this.prompt); // >
          } else {
            if (this.inputBuffer.trim() !== '') {
              this.buffer.push(this.inputBuffer);
              this.inputBuffer = '';
            }
            this.term.writeln('\r\n-- Edit Mode Disabled --');
            this.term.writeln('\r\n[SAVED] Playbook updated:\r\n');
            this.term.writeln(this.buffer.join('\n'));
          }
        }
      }));
    });
  };
  document.head.appendChild(script);
</script>

