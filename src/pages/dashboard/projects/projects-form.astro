---
import { openDB } from "../../../utils/db";
import { Icons } from "../../../utils/icons";
import formValidate from "../../../utils/formValidation";

const { user } = Astro.locals;
const db = await openDB();
const { id: userId } = await db.get(`SELECT id FROM users WHERE email = ?`, [
  user?.email,
]);

const playbooks = await db.all(
  `SELECT id, name FROM playbooks WHERE user_id = ?`,
  [userId],
);
const inventories = await db.all(
  `SELECT id, name FROM inventories WHERE user_id = ?`,
  [userId],
);
const hosts = await db.all(
  `
  SELECT * FROM inventory_hosts
  WHERE inventory_id IN (${inventories.map(() => "?").join(",")})
`,
  inventories.map((inv: any) => inv.id),
);
const inventoriesWithHosts = inventories.map((inv: any) => {
  return {
    ...inv,
    hosts: hosts.filter((h: any) => h.inventory_id === inv.id),
  };
});

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const id = formData.get("id");
  const name = formData.get("name");
  const playbookId = formData.get("playbooks");
  const inventoryId = formData.get("inventories");
  const additionalHosts = formData.getAll("ip_address[]").map((ip, index) => ({
    ip_address: ip,
    description: formData.getAll("description[]")[index],
  }));
  const variables = formData.getAll("variable_key[]").map((key, index) => ({
    key,
    value: formData.getAll("variable_value[]")[index],
  }));
  const secrets = formData.getAll("secret_key[]").map((key, index) => ({
    key,
    value: formData.getAll("secret_value[]")[index],
  }));
  const parameters = formData.getAll("parameter_key[]").map((key, index) => ({
    key,
    value: formData.getAll("parameter_value[]")[index],
  }));
  const inventoryHosts = formData.getAll("inventory_hosts");

  const errors: Record<string, string> = {};

  if (formValidate.notEmpty(name)) errors.name = "Nama tidak boleh kosong";

  if (formValidate.notEmpty(playbookId))
    errors.playbooks = "Playbook tidak boleh kosong";

  if (formValidate.notEmpty(inventoryId))
    errors.inventories = "Inventory tidak boleh kosong";

  if (formData.getAll("ip_address[]").length > 0) {
    if (
      formValidate.isIpAddress(
        formData.getAll("ip_address[]"),
        (elements: string[], rgx: RegExp) =>
          elements.filter((ip) => ip.trim() !== "" && !rgx.test(ip.trim())),
      )
    )
      errors["ip_address[]"] = "IP Address tidak valid";
  }

  if (formData.getAll("description[]")) {
    if (
      formValidate.customValidation(
        formData.getAll("description[]"),
        (elements: string[]) => elements.filter((el) => el.trim() === ""),
      )
    ) {
      errors["description[]"] = "Deskripsi tidak boleh kosong";
    }
  }

  if (formData.getAll("variable_key[]").length > 0) {
    if (
      formValidate.customValidation(
        formData.getAll("variable_key[]"),
        (elements: string[]) => elements.filter((el) => el.trim() === ""),
      )
    ) {
      errors["variable_key[]"] = "Key tidak boleh kosong";
    }
  }

  if (formData.getAll("variable_value[]").length > 0) {
    if (
      formValidate.customValidation(
        formData.getAll("variable_value[]"),
        (elements: string[]) => elements.filter((el) => el.trim() === ""),
      )
    ) {
      errors["variable_value[]"] = "Value tidak boleh kosong";
    }
  }

  if (formData.getAll("secret_key[]").length > 0) {
    if (
      formValidate.customValidation(
        formData.getAll("secret_key[]"),
        (elements: string[]) => elements.filter((el) => el.trim() === ""),
      )
    ) {
      errors["secret_key[]"] = "Key tidak boleh kosong";
    }
  }

  if (formData.getAll("secret_value[]").length > 0) {
    if (
      formValidate.customValidation(
        formData.getAll("secret_value[]"),
        (elements: string[]) => elements.filter((el) => el.trim() === ""),
      )
    ) {
      errors["secret_value[]"] = "Value tidak boleh kosong";
    }
  }

  if (formData.getAll("parameter_key[]").length > 0) {
    if (
      formValidate.customValidation(
        formData.getAll("parameter_key[]"),
        (elements: string[]) => elements.filter((el) => el.trim() === ""),
      )
    ) {
      errors["parameter_key[]"] = "Key tidak boleh kosong";
    }
  }

  if (formData.getAll("parameter_value[]").length > 0) {
    if (
      formValidate.customValidation(
        formData.getAll("parameter_value[]"),
        (elements: string[]) => elements.filter((el) => el.trim() === ""),
      )
    ) {
      errors["parameter_value[]"] = "Value tidak boleh kosong";
    }
  }

  if (Object.keys(errors).length > 0) {
    return new Response(JSON.stringify({ success: false, errors }), {
      status: 400,
      headers: { "Content-Type": "application/json" },
    });
  }

  const metaData = [
    ...additionalHosts.map(({ ip_address, description }) => ({
      type: "host",
      key: null,
      value: null,
      ip_address,
      description,
    })),
    ...variables.map(({ key, value }) => ({
      type: "variable",
      key,
      value,
      ip_address: null,
      description: null,
    })),
    ...secrets.map(({ key, value }) => ({
      type: "secret",
      key,
      value,
      ip_address: null,
      description: null,
    })),
    ...parameters.map(({ key, value }) => ({
      type: "parameter",
      key,
      value,
      ip_address: null,
      description: null,
    })),
    ...inventoryHosts.map((hostId) => ({
      type: "inventory_host",
      key: "inventories_id",
      value: hostId,
      ip_address: null,
      description: null,
    })),
  ];

  if (id) {
    await db.run(
      `UPDATE projects SET name = ?, playbook_id = ?, inventories_id = ? WHERE id = ?`,
      [name, playbookId, inventoryId, id],
    );
    await db.run(`DELETE FROM project_metadata WHERE project_id = ?`, [id]);
    for (const { type, key, value, ip_address, description } of metaData) {
      await db.run(
        `INSERT INTO project_metadata (project_id, type, key, value, ip_address, description) VALUES (?, ?, ?, ?, ?, ?)`,
        [id, type, key, value, ip_address, description],
      );
    }
  } else {
    const project = await db.run(
      `INSERT INTO projects (user_id, name, playbook_id, inventories_id) VALUES (?, ?, ?, ?)`,
      [userId, name, playbookId, inventoryId],
    );

    const projectId = project.lastID;

    for (const { type, key, value, ip_address, description } of metaData) {
      await db.run(
        `INSERT INTO project_metadata (project_id, type, key, value, ip_address, description) VALUES (?, ?, ?, ?, ?, ?)`,
        [projectId, type, key, value, ip_address, description],
      );
    }
  }

  return new Response(
    JSON.stringify({
      success: true,
      redirect: "/dashboard/projects",
    }),
    {
      status: 200,
      headers: { "Content-Type": "application/json" },
    },
  );
}
---

<dialog class="modal" id="projects_create_or_update">
  <div class="modal-box max-h-[90vh] overflow-y-auto">
    <form
      class="flex flex-col gap-6"
      method="POST"
      x-data="{
        inventory: null,
        selectedHosts: [],
        additional_hosts: [{ip_address: '', description: ''}],
        variables: [{key: '',value: ''}],
        secrets: [{key: '',value: ''}],
        parameters: [{key: '',value: ''}],
        addHost() {
          this.additional_hosts.push({ ip_address: '', description: '' });
        },
        removeHost(index) {
          this.additional_hosts.splice(index, 1);
        },
        addVariables() {
          this.variables.push({ key: '', value: '' });
        },
        removeVariables(index) {
          this.variables.splice(index, 1);
        },
        addSecrets() {
          this.secrets.push({ key: '', value: '' });
        },
        removeSecrets(index) {
          this.secrets.splice(index, 1);
        },
        addParameters() {
          this.parameters.push({ key: '', value: '' });
        },
        removeParameters(index) {
          this.parameters.splice(index, 1);
        },
        syncProject() {
          const _project = JSON.parse(selectedProject);
          this.inventory = _project?.inventory_id ?? null;
          const children = Array.isArray(_project?.children) ? _project.children : [];
          this.additional_hosts = children
            .filter(item => item.type === 'host')
            .map(item => ({
              ip_address: item.ip_address,
              description: item.description
            }));
          this.variables = children
            .filter(item => item.type === 'variable')
            .map(item => ({
              key: item.key,
              value: item.value
            }));
          this.secrets = children
            .filter(item => item.type === 'secret')
            .map(item => ({
              key: item.key,
              value: item.value
            }));
          this.parameters = children
            .filter(item => item.type === 'parameter')
            .map(item => ({
              key: item.key,
              value: item.value
            }));
          this.selectedHosts = children
            .filter(item => item.type === 'inventory_host')
            .map(item => item.value);
        },
        resetForm() {
          this.inventory = null;
          this.selectedHosts = [];
          this.additional_hosts = [];
          this.variables = [];
          this.secrets = [];
          this.parameters = [];
          const modal = document.getElementById('projects_create_or_update');
          if (modal) {
            modal.close();
          }
        }
      }"
      x-effect="syncProject()"
      action="/dashboard/projects/projects-form"
    >
      <input
        type="hidden"
        name="id"
        :value="JSON.parse(selectedProject)?.project_id"
      />
      <h2
        class="card-title"
        x-text="JSON.parse(selectedProject)?.project_id ? 'Update Project' : 'Create Project'"
      >
      </h2>
      <div class="flex flex-col gap-2">
        <label for="name">Name</label>
        <input
          id="name"
          type="text"
          name="name"
          placeholder="Name"
          class="input input-bordered w-full rounded-none"
          required
          :value="JSON.parse(selectedProject)?.project_name"
        />
      </div>
      <div class="flex flex-col gap-2">
        <label for="playbooks">Playbooks</label>
        <select
          class="select rounded-none w-full"
          name="playbooks"
          id="playbooks"
          required
          :value="JSON.parse(selectedProject)?.playbook_id"
        >
          <option value="" disabled selected>Choose Playbook</option>
          {
            playbooks.map((playbook: any) => (
              <option value={playbook.id}>{playbook.name}</option>
            ))
          }
        </select>
      </div>
      <div class="flex flex-col gap-2">
        <label for="inventories">Inventory</label>
        <select
          class="select rounded-none w-full"
          name="inventories"
          id="inventories"
          required
          data-inventories={JSON.stringify(
            inventoriesWithHosts.flatMap((inventory: Record<string, any>) =>
              inventory.hosts.map((host: any) => String(host.id)),
            ),
          )}
          @change="inventory = $event.target.value; selectedHosts = JSON.parse($el.dataset.inventories)"
          :value="JSON.parse(selectedProject)?.inventory_id"
        >
          <option value="" disabled selected>Choose Inventories</option>
          {
            inventories.map((inventory: any) => (
              <option value={inventory.id}>{inventory.name}</option>
            ))
          }
        </select>
      </div>
      <template x-if="inventory">
        <div class="flex flex-col gap-6">
          <div class="flex flex-row justify-between">
            <label class="font-semibold">IP Address</label>
            <label class="font-semibold">Description</label>
            <label class="font-semibold">&nbsp;</label>
          </div>
          {
            inventoriesWithHosts
              .flatMap((inventory: any) => inventory.hosts)
              .map((host: any) => (
                <div class="flex justify-between items-center">
                  <label>{host.ip_address}</label>
                  <label>{host.description}</label>
                  <input
                    name="inventory_hosts"
                    type="checkbox"
                    value={host.id}
                    x-model="selectedHosts"
                    class="toggle toggle-md"
                  />
                </div>
              ))
          }
        </div>
      </template>
      <div class="flex flex-col gap-4">
        <div class="flex items-center gap-2">
          <label for="hosts" class="flex items-center">Additional Hosts</label>
          <Icons.add class="w-5 h-5 cursor-pointer" @click="addHost()" />
        </div>
        <div class="flex flex-row items-center gap-4">
          <div id="errors_ip_address" class="text-sm text-red-600"></div>
          <div id="errors_description" class="text-sm text-red-600"></div>
        </div>
        <template x-for="(host, index) in additional_hosts" :key="index">
          <div class="flex flex-row gap-2 items-end">
            <div class="flex flex-col gap-2">
              <label :for="'ip_address_' + index">IP Address</label>
              <input
                :id="'ip_address_' + index"
                type="text"
                name="ip_address[]"
                placeholder="IP Address"
                class="input input-bordered w-full rounded-none"
                x-model="host.ip_address"
                required
              />
            </div>
            <div class="flex flex-col gap-2">
              <label :for="'description_' + index">Description</label>
              <input
                :id="'description_' + index"
                type="text"
                name="description[]"
                placeholder="Description"
                class="input input-bordered w-full rounded-none"
                x-model="host.description"
                required
              />
            </div>
            <Icons.trash
              class="w-6 h-6 cursor-pointer"
              @click="removeHost(index)"
            />
          </div>
        </template>
      </div>
      <div class="flex flex-col gap-4">
        <div class="flex items-center gap-2">
          <label for="hosts" class="flex items-center">Variables</label>
          <Icons.add class="w-5 h-5 cursor-pointer" @click="addVariables()" />
        </div>
        <div class="flex flex-row items-center gap-4">
          <div id="errors_variable_key" class="text-sm text-red-600"></div>
          <div id="errors_variable_value" class="text-sm text-red-600"></div>
        </div>
        <template x-for="(variable, index) in variables" :key="index">
          <div class="flex flex-row gap-2 items-end">
            <div class="flex flex-col gap-2">
              <label :for="'key_' + index">Key</label>
              <input
                :id="'key_' + index"
                type="text"
                name="variable_key[]"
                placeholder="Key"
                class="input input-bordered w-full rounded-none"
                x-model="variable.key"
                required
              />
            </div>
            <div class="flex flex-col gap-2">
              <label :for="'value_' + index">Value</label>
              <input
                :id="'value_' + index"
                type="text"
                name="variable_value[]"
                placeholder="Value"
                class="input input-bordered w-full rounded-none"
                x-model="variable.value"
                required
              />
            </div>
            <Icons.trash
              class="w-6 h-6 cursor-pointer"
              @click="removeVariables(index)"
            />
          </div>
        </template>
      </div>
      <div class="flex flex-col gap-4">
        <div class="flex items-center gap-2">
          <label for="hosts" class="flex items-center">Secrets</label>
          <Icons.add class="w-5 h-5 cursor-pointer" @click="addSecrets()" />
        </div>
        <div class="flex flex-row items-center gap-4">
          <div id="errors_secret_key" class="text-sm text-red-600"></div>
          <div id="errors_secret_value" class="text-sm text-red-600"></div>
        </div>
        <template x-for="(secret, index) in secrets" :key="index">
          <div class="flex flex-row gap-2 items-end">
            <div class="flex flex-col gap-2">
              <label :for="'key_' + index">Key</label>
              <input
                :id="'key_' + index"
                type="text"
                name="secret_key[]"
                placeholder="Key"
                class="input input-bordered w-full rounded-none"
                x-model="secret.key"
                required
              />
            </div>
            <div class="flex flex-col gap-2">
              <label :for="'value_' + index">Value</label>
              <input
                :id="'value_' + index"
                type="text"
                name="secret_value[]"
                placeholder="Value"
                class="input input-bordered w-full rounded-none"
                x-model="secret.value"
                required
              />
            </div>
            <Icons.trash
              class="w-6 h-6 cursor-pointer"
              @click="removeSecrets(index)"
            />
          </div>
        </template>
      </div>
      <div class="flex flex-col gap-4">
        <div class="flex items-center gap-2">
          <label for="hosts" class="flex items-center">Parameters</label>
          <Icons.add class="w-5 h-5 cursor-pointer" @click="addParameters()" />
        </div>
        <div id="errors_parameter_key" class="text-sm text-red-600"></div>
        <div id="errors_parameter_value" class="text-sm text-red-600"></div>
        <template x-for="(pars, index) in parameters" :key="index">
          <div class="flex flex-row gap-2 items-end">
            <div class="flex flex-col gap-2">
              <label :for="'key_' + index">Key</label>
              <input
                :id="'key_' + index"
                type="text"
                name="parameter_key[]"
                placeholder="Key"
                class="input input-bordered w-full rounded-none"
                x-model="pars.key"
                required
              />
            </div>
            <div class="flex flex-col gap-2">
              <label :for="'value_' + index">Value</label>
              <input
                :id="'value_' + index"
                type="text"
                name="parameter_value[]"
                placeholder="Value"
                class="input input-bordered w-full rounded-none"
                x-model="pars.value"
                required
              />
            </div>
            <Icons.trash
              class="w-6 h-6 cursor-pointer"
              @click="removeParameters(index)"
            />
          </div>
        </template>
      </div>
      <div class="flex gap-4">
        <button
          class="btn btn-neutral btn-outline flex-1 rounded-none"
          type="reset"
          @click="resetForm()">Cancel</button
        >
        <button class="btn btn-primary flex-1 rounded-none" type="submit"
          >Save</button
        >
      </div>
    </form>
  </div>
</dialog>
<script is:inline>
  const form = document.querySelector("#projects_create_or_update form");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    window.formUtils.clearErrors(form);

    const data = new FormData(form);

    try {
      const res = await fetch(form.action, {
        method: "POST",
        body: data,
      });

      const result = await res.json();

      if (!res.ok) {
        if (result.errors) {
          for (const [field, msg] of Object.entries(result.errors)) {
            window.formUtils.showError(form, field, msg);
          }
        } else {
          alert("Terjadi kesalahan");
        }
      } else if (result.success) {
        window.location.href = result.redirect;
      }
    } catch (error) {
      alert("Error jaringan, coba lagi");
    }
  });
</script>
