---
import Dashboard from "../../layouts/Dashboard.astro";
import PlaybooksCreateOrUpdate from "./playbooks-create-or-update.astro";
import { openDB } from "../../utils/db";
import { Icons } from "../../utils/icons";
import PlaybooksDelete from "./playbooks-delete.astro";

const db = await openDB()

const search = Astro.url.searchParams.get("search") || ""
const type = Astro.url.searchParams.get("type") || "all"

const playbooks = await db.all(`
  SELECT * FROM playbooks
  WHERE name LIKE ? AND type LIKE ?
`, [`%${search}%`, type === "all" ? "%" : type])

---
<Dashboard pageTitle="Playbooks">
  <section slot="content" class="card bg-white w-full rounded-none py-12 px-12 shadow-sm flex flex-col gap-8"
    x-data="{ selectedPlaybookId: null, selectedPlaybook: null }"
  >
    <div class="flex justify-between items-center gap-4 flex-wrap">
      <h2 class="text-xl font-semibold">Playbooks</h2>
      <div class="flex items-center gap-4">
        <div
          x-data="{
          search: new URLSearchParams(window.location.search).get('search') || '',
          updateSearch() {
            const params = new URLSearchParams(window.location.search);
            if (this.search) {
              params.set('search', this.search);
            } else {
              params.delete('search');
            }
            window.location.search = params.toString();
          }
  }"
        >
          <label class="input rounded-none w-[220px]">
            <svg
              class="h-[1em] opacity-50"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 24 24"
            >
              <g
                stroke-linejoin="round"
                stroke-linecap="round"
                stroke-width="2.5"
                fill="none"
                stroke="currentColor"
              >
                <circle cx="11" cy="11" r="8"></circle>
                <path d="m21 21-4.3-4.3"></path>
              </g>
            </svg>

            <input
              type="search"
              class="grow"
              placeholder="Search"
              name="search"
              x-model="search"
              @keydown.enter.prevent="updateSearch"
            />
          </label>
        </div>
        <label
          x-data="{
            type: '',
            updateQueryParam() {
              const params = new URLSearchParams(window.location.search);
              if (this.type) {
                params.set('type', this.type);
              } else {
                params.delete('type');
              }
              window.location.search = params.toString();
            }
          }"
          x-init="type = new URLSearchParams(window.location.search).get('type') || 'all'"
        >
          <select
            class="select rounded-none w-full"
            name="type"
            @change="updateQueryParam"
            x-model="type"
          >
            <option value="all">All Status</option>
            <option value="static">Static</option>
            <option value="git">Git</option>
          </select>
        </label>
        <button
          class="btn btn-neutral rounded-none w-[140px]"
          x-on:click.prevent="selectedPlaybookId = null; selectedPlaybook = null; document.getElementById('playbooks_create_or_update').showModal();"
          x-cloak
          x-show="$store.role.permissions.projects.includes('create')"
        >
          Create
        </button>
      </div>
    </div>
    <div class="overflow-x-auto">
      <div>
        <table class="table">
          <thead>
            <tr>
              <th class="text-black">No.</th>
              <th class="text-black">Name</th>
              <th class="text-black">Type</th>
              <th class="text-black">URI</th>
              <th class="text-black" x-show="$store.role.permissions.projects.includes('delete') && $store.role.permissions.projects.includes('edit')" x-cloak>Action</th>
            </tr>
          </thead>
          <tbody>
          {playbooks.map((playbook: any, idx: number) => (
            <tr>
              <td>{idx + 1}</td>
              <td>{playbook.name}</td>
              <td class="capitalize">{playbook.type}</td>
              <td>{playbook.main_file}</td>
              <td class="flex items-center gap-4">
                <a x-cloak x-show="$store.role.permissions.projects.includes('delete')" href="#" data-playbookId={playbook.id} x-on:click.prevent="selectedPlaybookId = $el.dataset.playbookid; document.getElementById('playbooks_delete').showModal();">
                  <Icons.trash/>
                </a>
                <a x-cloak x-show="$store.role.permissions.projects.includes('edit')" href="#" data-playbookId={playbook.id} data-playbook={JSON.stringify(playbook)} x-on:click.prevent="selectedPlaybookId = $el.dataset.playbookid; selectedPlaybook = $el.dataset.playbook; document.getElementById('playbooks_create_or_update').showModal();">
                  <Icons.edit/>
                </a>
              </td>
            </tr>
          ))}
          </tbody>
        </table>
      </div>
    </div>
    <PlaybooksCreateOrUpdate slot="dialog" />
    <PlaybooksDelete slot="dialog" />
  </section>
</Dashboard>
<script is:inline>
  const params = new URLSearchParams(window.location.search);
  if (!params.has("type")) {
    params.set("type", "all");

    window.location.search = params.toString();
  }
</script>
