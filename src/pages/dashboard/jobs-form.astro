---
import { openDB } from "../../utils/db";
import formValidate from "../../utils/formValidation";

const { user } = Astro.locals;
const db = await openDB();
const { id: userId } = await db.get(`SELECT id FROM users WHERE email = ?`, [
  user?.email,
]);

const getProjects = await db.all(
  `
  SELECT id, name FROM projects WHERE user_id = ?
`,
  [userId],
);

if (Astro.request.method === "POST") {
  const formData = await Astro.request.formData();
  const name = formData.get("name");
  const project = formData.get("project");
  const type = formData.get("type");
  const periodically = formData.get("periodically");
  const cronsyntax = formData.get("cronsyntax");
  const validuntil = formData.get("validuntil");
  const id = formData.get("id");
  const today = new Date();
  let status = "inactive";
  if (typeof validuntil === "string") {
    const validUntilDate = new Date(validuntil);
    if (!isNaN(validUntilDate.getTime())) {
      status = today > validUntilDate ? "inactive" : "active";
    } else {
      console.warn("Invalid date format for validuntil");
    }
  } else {
    console.warn("validuntil is missing or not a string");
  }

  const errors: Record<string, string> = {};

  if (formValidate.notEmpty(name)) errors.name = "Nama tidak boleh kosong";

  if (formValidate.notEmpty(project))
    errors.project = "Project tidak boleh kosong";

  if (formValidate.notEmpty(type)) errors.type = "Tipe tidak boleh kosong";

  if (type === "one_time") {
    if (formValidate.notEmpty(periodically))
      errors.periodically = "Choose time tidak boleh kosong";
  }

  if (type === "periodically") {
    if (formValidate.notEmpty(cronsyntax))
      errors.cronsyntax = "Cron Syntax tidak boleh kosong";

    if (formValidate.notEmpty(validuntil))
      errors.validuntil = "Valid Until tidak boleh kosong";
  }

  if (Object.keys(errors).length > 0) {
    return new Response(JSON.stringify({ success: false, errors }), {
      status: 400,
      headers: { "Content-Type": "application/json" },
    });
  }

  if (id) {
    await db.run(
      `UPDATE jobs SET name = ?, project_id = ?, type = ?, cron_syntax = ?, choose_time = ?, valid_until = ?, status = ? WHERE id = ?`,
      [name, project, type, cronsyntax, periodically, validuntil, status, id],
    );
  } else {
    await db.run(
      `INSERT INTO jobs (user_id, project_id, name, type, cron_syntax, choose_time, valid_until, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?)`,
      [
        userId,
        project,
        name,
        type,
        cronsyntax,
        periodically,
        validuntil,
        status,
      ],
    );
  }
  return new Response(
    JSON.stringify({
      success: true,
      redirect: "/dashboard/jobs",
    }),
    {
      status: 200,
      headers: { "Content-Type": "application/json" },
    },
  );
}
---

<dialog class="modal" id="jobs_create_or_update_modal">
  <div class="modal-box max-h-screen overflow-y-auto">
    <form
      x-data="{
      selectedType: '',
      selectedPeriodically: '',
      periodicallyText: 'Expired At',
      selectedExpiredAt: '',
      expiredAtText: 'Expired At',
      syncJobs() {
        const job = JSON.parse(this.selectedJob) ?? null;
        if (job) {
          this.selectedType = job.type;
          this.selectedPeriodically = job.choose_time;
          this.periodicallyText = job.choose_time;
          this.selectedExpiredAt = job.valid_until;
          this.expiredAtText = job.valid_until;
        } else {
          this.selectedType = '';
          this.selectedPeriodically = '';
          this.periodicallyText = 'Expired At';
          this.selectedExpiredAt = '';
          this.expiredAtText = 'Expired At';
        }
      },
      resetForm() {
        this.selectedType = '';
        this.selectedPeriodically = '';
        this.periodicallyText = 'Expired At';
        this.selectedExpiredAt = '';
        this.expiredAtText = 'Expired At';
        const modal = document.getElementById('jobs_create_or_update_modal');
        if (modal) {
          modal.close();
        }
      }
     }"
      x-effect="syncJobs()"
      class="flex flex-col gap-6"
      method="POST"
      action="/dashboard/jobs-form"
    >
      <h2 class="card-title" x-text="selectedJobId ? 'Update Job' : 'New Job'">
      </h2>
      <input type="hidden" name="id" :value="JSON.parse(selectedJob)?.id" />
      <div class="flex flex-col gap-2">
        <label for="name">Name</label>
        <input
          id="name"
          type="text"
          name="name"
          placeholder="Name"
          class="input input-bordered w-full rounded-none"
          required
          :value="JSON.parse(selectedJob)?.name"
        />
      </div>
      <div class="flex flex-col gap-2">
        <label for="project">Project</label>
        <select
          class="select rounded-none w-full"
          name="project"
          id="project"
          required
          :value="JSON.parse(selectedJob)?.project_id"
        >
          <option value="" disabled selected>Choose Project</option>
          {
            getProjects.map((project: any) => (
              <option value={project.id}>{project.name}</option>
            ))
          }
        </select>
      </div>
      <div class="flex flex-col gap-2">
        <label for="type">Type</label>
        <select
          class="select rounded-none w-full"
          name="type"
          id="type"
          required
          @change="selectedType = $event.target.value"
          :value="JSON.parse(selectedJob)?.type"
        >
          <option value="" disabled selected>Choose Type</option>
          <option value="one_time">One Time</option>
          <option value="periodically">Periodically</option>
        </select>
      </div>
      <template x-if="selectedType === 'one_time'">
        <div
          class="flex flex-col gap-2"
          x-data="{
              init() {
                flatpickr(this.$refs.input, {
                  static: true,
                  enableTime: true,
                  dateFormat: 'Y-m-d H:i',
                  onChange: (selectedDates, dateStr) => {
                    this.periodically = dateStr;
                    this.selectedPeriodically = dateStr;
                  },
                });
              }
            }"
          x-init="$nextTick(() => init())"
        >
          <label for="periodically">Choose Time</label>
          <input
            type="text"
            id="flatpickr-periodically"
            class="input input-border w-full rounded-none"
            placeholder="Select date & time"
            x-ref="input"
            x-model="periodicallyText"
            readonly
          />
          <input
            type="hidden"
            name="periodically"
            id="periodically"
            :value="selectedPeriodically"
          />
        </div>
      </template>
      <template x-if="selectedType === 'periodically'">
        <div class="flex flex-col gap-6">
          <div class="flex flex-col gap-2">
            <label for="cronsyntax">Cron Syntax</label>
            <input
              id="cronsyntax"
              type="text"
              name="cronsyntax"
              placeholder="Cron Syntax"
              class="input input-bordered w-full rounded-none"
              required
              :value="JSON.parse(selectedJob)?.cron_syntax"
            />
          </div>
          <div
            class="flex flex-col gap-2"
            x-data="{
              init() {
                flatpickr(this.$refs.input, {
                  static: true,
                  enableTime: true,
                  dateFormat: 'Y-m-d H:i',
                  onChange: (selectedDates, dateStr) => {
                    this.expiredAtText = dateStr;
                    this.selectedExpiredAt = dateStr;
                  },
                });
              }
            }"
            x-init="$nextTick(() => init())"
          >
            <label for="validuntil">Valid Until</label>
            <input
              type="text"
              id="flatpickr-validuntil"
              class="input input-border w-full rounded-none"
              placeholder="Select date & time"
              x-ref="input"
              x-model="expiredAtText"
              readonly
            />
            <input
              type="hidden"
              name="validuntil"
              id="validuntil"
              :value="selectedExpiredAt"
            />
          </div>
        </div>
      </template>
      <div class="flex gap-4">
        <button
          class="btn btn-neutral btn-outline flex-1 rounded-none"
          type="reset"
          @click="resetForm()">Cancel</button
        >
        <button class="btn btn-primary flex-1 rounded-none" type="submit"
          >Save</button
        >
      </div>
    </form>
  </div>
</dialog>
<link
  rel="stylesheet"
  href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
/>
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>
<script is:inline>
  const form = document.querySelector("#jobs_create_or_update_modal form");

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const data = new FormData(form);
    try {
      const res = await fetch(form.action, {
        method: "POST",
        body: data,
      });
      const result = await res.json();
      if (!res.ok) {
        if (result.errors) {
          for (const [field, msg] of Object.entries(result.errors)) {
            window.formUtils.showError(form, field, msg);
          }
        } else {
          alert("Terjadi kesalahan");
        }
      } else if (result.success) {
        window.location.href = result.redirect;
      }
    } catch (error) {
      alert("Error jaringan, coba lagi");
    }
  });
</script>
